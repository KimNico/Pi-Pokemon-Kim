import { useSelector } from 'react-redux';
import { Link } from 'react-router-dom';
import Pokemon from "../Pokemon/Pokemon";
import styles from "./Pokemons.module.css";
import imgLoading from "../../pictures/Pikachu_Caminando.gif";
import pokeball_not_found from "../../pictures/pokeball_not_found.gif";

export default function Pokemons({pks}){

    let currentPage = parseInt(useSelector((state) => state.currentPage));
    let totalPokemons = parseInt(useSelector((state) => state.totalPokemons));
    let itemsByPage = parseInt(useSelector((state) => state.itemsByPage));

    let notFound = useSelector((state) => state.notFound);
    let notFoundSearch = useSelector((state) => state.notFoundSearch);
    let loadingPokemons = useSelector((state) => state.loadingPokemons);
    let searchingPokemon = useSelector((state) => state.searchingPokemon);
 

    let start = (currentPage - 1) * itemsByPage;
    let end = start + itemsByPage;
    if (end > totalPokemons) end = totalPokemons;
    if (start < 0) start = 0;
    
 
    return <div className={styles.container_cards}>
                 
        {
            ((((pks.length === 0) && notFound && !loadingPokemons ) 
                || (searchingPokemon && !loadingPokemons && notFound) 
                || ((pks.length === 0) && searchingPokemon && loadingPokemons && notFound) // condicion para filtro
                || ( notFoundSearch  && searchingPokemon) // condicion para search not found
                
            ) ?
                    <div className={styles.container_not_found}>
                        <img src={pokeball_not_found} className={styles.img_not_found} alt="pokemon not found" />
                        <h4 className={styles.text_not_found}>No se encontraron resultados.</h4>
                    </div>                       
                :

                (loadingPokemons && !searchingPokemon)  ?         
                        (<div className={styles.container_loading}>
                            <img src={imgLoading} className={styles.img_loading} alt="loading" />
                            <h4 className={styles.text_loading}>Pokemons loading...</h4>
                        </div>)
                
                :
                pks.map((pokemon) => {
                    return (
                        <Link to={`/pokemons/${pokemon.id}`} key={pokemon.id}>
                            <Pokemon id={pokemon.id}
                                name={pokemon.name}
                                image={pokemon.image}
                                attack={pokemon.attack}
                                types={pokemon.types} key={pokemon.id} />
                        </Link>
                    ) // return.map
                }).slice(start, end)
            ) 
        }                    
          
        

    </div>
} 


import React from "react";
import { useParams } from "react-router";
import { useDispatch , useSelector } from "react-redux";
import { useEffect } from "react";
import NavBar from "../NavBar/NavBar";
import Pokemon from "../Pokemon/Pokemon";
import { getPokemonById, resetDetails, loadingDetailsSet } from "../../store/actions";
import styles from "./Details.module.css";
import "./bars.css";
import pictureAsh from "../../pictures/ash.png";
import imgLoading from "../../pictures/Pikachu_Caminando.gif";
import { MAX_STATS } from "../../constants/stats"; // maximo varlos de las stats


export default function Details(){

    const {id} = useParams();
    const dispatch = useDispatch();
    const pokemonDetails = useSelector(state => state.pokemonDetails);
    const loading = useSelector(state => state.loadingDetails);
    

    useEffect(  () => {
        dispatch(resetDetails());
        dispatch(loadingDetailsSet(true));
        dispatch(getPokemonById(id));
        // eslint-disable-next-line
    }, [id]);

        
    let barraHP = null;
    let barraAttack = null;
    let barraDefense = null;
    let barraSpeed = null;
    
    if (pokemonDetails) {
        
        let porcentajeHP = (pokemonDetails.hp / MAX_STATS) * 100;
        let porcentajeAttack = (pokemonDetails.attack / MAX_STATS) * 100;
        let porcentajeDefense = (pokemonDetails.defense / MAX_STATS) * 100;
        let porcentajeSpeed = (pokemonDetails.speed / MAX_STATS) * 100;
        
        barraHP = React.CSSProperties = {"--bar-value": porcentajeHP.toString() + '%'};
        barraAttack = React.CSSProperties = {"--bar-value": porcentajeAttack.toString() + '%'};
        barraDefense = React.CSSProperties = {"--bar-value": porcentajeDefense.toString() + '%'};
        barraSpeed = React.CSSProperties = {"--bar-value": porcentajeSpeed.toString() + '%'};
            
     }


    return (

    <div >
        <NavBar/>

        { loading ?
               (<>
               <div className={styles.container_loading}>
                    <img src={imgLoading} alt="Loading..." />
                    Loading...
                </div></>)
        :    // verificacion de que el pokemon este cargado para mostrarlo
            
            (<div className={styles.container}>
                <div className={styles.details_container_title}>
                    <h1 className={styles.details_title}>POKÃ‰MON DETAILS</h1>  
                </div>

                <div className={styles.container_details}> 
                    <div > 
                        <div >
                            <img className={styles.details_image} src={pictureAsh} alt="Ash" />
                        </div>
                    </div>

                    <div className={styles.details_info}>

                        <Pokemon id={pokemonDetails.id}
                                name={pokemonDetails.name}
                                image={pokemonDetails.image}
                                attack={pokemonDetails.attack}
                                types={pokemonDetails.types} key={pokemonDetails.id} />

                    </div>
                    <div className={styles.details_stats}>
                        <div className={styles.details_info_types}>
                        <span className={styles.stats_title}>Measures</span>
                            <ul className={styles.ul}>
                                <li className={styles.stats_item}>Height: {pokemonDetails.height}</li>
                                <li className={styles.stats_item}>Weight: {pokemonDetails.weight}</li>
                            </ul>
                        </div>
                        <div className={styles.details_stats}>
                            <span className={styles.stats_title}>Stats</span>
                            <div className="chart-wrap">
                                <div className="grid">
                                    <div className="bar" style={barraHP} 
                                            data-name={"HP("+pokemonDetails.hp+")"} title="HP"></div>
                                    <div className="bar" style={barraAttack} 
                                            data-name={"Attack("+pokemonDetails.attack+")"} title="Attack"></div>
                                    <div className="bar" style={barraDefense} 
                                            data-name={"Defense("+pokemonDetails.defense+")"} title="Defense"></div>
                                    <div className="bar" style={barraSpeed} 
                                            data-name={"Speed("+pokemonDetails.speed+")"} title="Speed"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>)
            }   

          
        </div>
    );

}


import { useState,  useEffect } from "react";
import { useDispatch, useSelector} from "react-redux";
import { useNavigate } from 'react-router-dom';
import { loadingSearchSet, resetSearchPokemon, searchPokemon } from "../../store/actions/";
import lupa from "../../pictures/search-Pokemon.png";
import Pagination from "../Pagination/Pagination";
import style from "./SearchBar.module.css";


export default function SearchBar(){
    const [search, setSearch] = useState("");
    let dispatch = useDispatch();
    let navigate = useNavigate();

    const pokemonFound = useSelector((state) => state.pokemonFound);
    const searchingPokemon = useSelector((state) => state.searchingPokemon);
    const loadingPokemons = useSelector((state) => state.loadingPokemons);
    const notFound = useSelector((state) => state.notFound);

   

    useEffect(() =>{
        if (!notFound && searchingPokemon && !loadingPokemons)
        {   
            dispatch(resetSearchPokemon());     
            navigate(`/pokemons/${pokemonFound.id}`);
        }
        
    },[pokemonFound]);
    

     
    function onSubmit(e){
        e.preventDefault();      
        if (search.length > 0) {
            dispatch(loadingSearchSet());
            dispatch(searchPokemon(search.toLowerCase()));
            setSearch("");
        }
    }



    function onInputChange(e){
        e.preventDefault();
        setSearch(e.target.value);
    }

    return (
        <div className={style.search_bar_conteiner}>
            <div>
                {      <div className={style.search_bar_subconteiner}>
                            <form className={style.form_search_bar} onSubmit={onSubmit}>
                                <input className={style.searchbar_input_text} type="text" value={search} onChange={onInputChange} placeholder="Enter Pokemon to search"/>
                                <button className={style.searchbar_input_submit} type="submit" >Search</button>
                                <img className={style.searchbar_input_lupa} src={lupa} alt="lupa"/>
                            </form>
                        </div>

                    }

            </div>
            
            <div>
                <div className={style.search_bar_subconteiner}>
                    <Pagination />
                </div>
            </div>
        </div>
    );

}

import { useDispatch, useSelector } from 'react-redux';
import { filterByType, filterByPokemon, resetSearchPokemon } from '../../store/actions';
import { ALL_POKEMONS, API_POKEMONS, DB_POKEMONS } from '../../constants/filter';
import styles from "./Filters.module.css";

export default function Filters() {  
    let types = useSelector(state => state.types);
    let filterTypes = useSelector(state => state.filterTypes);
    let filterPokemons = useSelector(state => state.filterPokemons);
    let dispatch = useDispatch();    

    
    function onChangeTypes(e){
        e.preventDefault();
        dispatch(resetSearchPokemon());
        dispatch(filterByType(e.target.value));
    }


    function onChangePokemon(e){
        e.preventDefault();
        dispatch(filterByPokemon(e.target.value));
    }


    return (
        
            <div className={styles.filter_container}>
                 <div className={styles.filter_item_title}><h3>FILTER</h3></div>
            
                <div >
                    <select className={styles.filter_select} value={filterTypes} onChange={onChangeTypes} >
                        <option value="allTypes">All Types</option>
                        {types.map(type => (
                            <option key={type.name} value={type.name}>{type.name}</option>
                        ))}
                    </select>

                </div>
                <div >
                    <select className={styles.filter_select} value={filterPokemons} onChange={onChangePokemon}>
                        <option value={ALL_POKEMONS} >All PokÃ©mon</option>
                        <option value={API_POKEMONS} >API PokÃ©mon</option>
                        <option value={DB_POKEMONS} >DB PokÃ©mon</option>
                    </select>
                </div>
        </div>
        )
                
}